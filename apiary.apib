FORMAT: 1A
# IAS

Documentation for IAS API.

## Group Installation

- Install neo4j community edition and start the server.
    + https://neo4j.com/download/
    + Install java8 if not already installed.
    + Open the installed application and start the application on port 7474 by clicking on start server
- Make a new folder
    + mkdir IAS
    + cd IAS
- Create virtual environment with python 2.7 and activate it
    + virtualenv venv --distribute
    + source venv/bin/activate 
    + More info - http://docs.python-guide.org/en/latest/dev/virtualenvs/
- Clone the repo from the source
    + git clone https://ratulj@bitbucket.org/jeetlab/ias-backend.git
- Install dependencies from requirement.txt
    + pip install -r ias-backend/requirements.txt
- Create migrations for the project
    + cd ias-backend
    + python manage.py migrate
- Run tests to see if everything is working
    + python manage.py harvest




## Group Stops

Get Array of all the stops or a single stop by it's unique ID

## GET /stops

+ Response 200 (application/json)
    + Attributes
        - BusStop (array[Stop])


## GET /stops/{id}

+ Parameters
  + id: 1 (required, number) - The unique ID of the stop in integer.

+ Response 200 (application/json)
    + Attributes
        - BusStop (Stop)
        

## Group Routes

Get Array of all the routes or a single route by it's unique ID

## GET /routes

+ Parameters
  + origin: 'Vellore' (optional, string) - The name of the origin stop of the route.
  + destination: 'Hyderabad' (optional, string) - The name of the origin stop of the route.

+ Response 200 (application/json)
    + Attributes
        - BusRoute (array[Route])

## GET /routes/{id}

+ Parameters
  + id: 1 (required, number) - The unique ID of the route in integer.

+ Response 200 (application/json)
    + Attributes
        - BusRoute (Route)
        
        
## GET /routes_coordinates/
Get Array of all the stops coordinates which are reachable from the origin.
example http://104.131.44.133/routes_coordinates/?origin=A

+ Parameters
  + origin: Koramangala (required, string) - The name of the origin stop

+ Response 200 (application/json)
    + Attributes
        - BusRoute (Coordinates)
        

## Group Rides

Get Array of all the rides or a single route by it's unique ID

The rides can be filtered by two optional parameters. The result will be list of rides
between start date and end date. Both dates inclusive

## Example
- /rides?start={date1}&end={date2} would return list of rides between date1 inclusive and date2 exclusive
- /rides?start={date1} would return list of rides from date1 inclusive till now
- /rides?start={date}&end={date} would return list of rides on date
- /rides?end={date} would return all the rides lte date

## GET /rides


+ Parameters
  + start: `2016-09-14` (optional, string) - Start date of the date range - yyyy-mm-dd
  + end: `2016-09-19` (optional, string) - End date of the date range - yyyy-mm-dd


+ Response 200 (application/json)
    + Attributes
        - Ride (array[Ride])


## GET /rides/{id}

+ Parameters
  + id: 1 (required, number) - The unique ID of the ride in integer.

+ Response 200 (application/json)
    + Attributes
        - Ride (Ride)
        


# Data Structures

## Coordinates (object)

- name: `Bangalore, Marathalli` (string, required) - The Name of the stop.
- address: `Punjabi Bagh, New Delhi, Delhi, India` (string, required) - Address of the stop.
- coordinates: `12.9591722,77.697419` (string, required) - Lat and Long coordinates of the location.
- can_reach: `[ "28.65278089999999,77.19214409999995", "28.4594965,77.02663830000006"]` (array, required) - Array of coordinates that are reachable.


## Ride (object)

- url: `http://127.0.0.1:8000/rides/6` (string) - Identifier for the resource.
- route: `http://127.0.0.1:8000/routes/1` (string, required) - The url/identifier of the route the ride will be taking.
- departure: `2016-09-18T18:40:00Z` (string, required) - The time of departure in UTF.
- ride_info: `The ride is delayed by 30 minutes` (string, required) - Optional inforamtion about the ride.
- status (enum[string])
  - Delayed - The ride will run at the scheduled time. This is the default value
  - On Time - The ride is delayed. The time of delay can be added to ride_info field.
  - Cancelled - The ride is cancelled. Furthur communication can be added to ride_info field.
  
  
## Stop (object)

- url: `http://127.0.0.1:8000/stops/6` (string) - Identifier for the resource.
- name: `Bangalore, Marathalli` (string, required) - The Name of the stop.
- address: `Near Marathalli Bridge, Kadbesanhalli, 490020` (string, required) - The address of the stop.
- city: `Bangalore` (string, required) - The name of the city where stop resides.
- location: `12.9591722,77.697419` (string, required) - Lat and Long coordinates of the location.
- isDisabled: `false` (boolean, required) - The status of the  stop. False means stop is active.
- stop_info: `The stop is near marathalli bridge` (string, required) - Extra info about the stop.

## Route (object)
- url: `http://127.0.0.1:8000/routes/1` (string, required) - Identifier for the resource
- name: `Vellore to Bangalore` (string, required) - The Name of the route
- start_stop: `Vellore` (string, required) - The Name of the origin stop.
- end_stop: `Bangalore` (string, required) - The Name of the destination stop.
- type (enum[string])
  - Regionali - They haven't finished their public profile or whatever
  - Interrogionali - Good as gold
  - Urbane - This place doesn't exist
- path: ["http://127.0.0.1:8000/stops/1", "http://127.0.0.1:8000/stops/5", "http://127.0.0.1:8000/stops/7"
 The Identifier of all the stops in the route.